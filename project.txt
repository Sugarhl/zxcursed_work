Contents of server/api/registration.py:
  from fastapi import APIRouter, Depends, HTTPException, status
  from sqlalchemy.ext.asyncio import AsyncSession
  from fastapi.security import OAuth2PasswordBearer
  
  from server.schemas import UserIn, UserOut
  from server.models import User, Student, Tutor
  from server.database import get_db
  from server.crud import create_user, get_user_by_username, create_student, create_tutor
  from server.utils import UserType
  
  router = APIRouter()
  
  oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
  
  
  @router.post("/register/{user_type}", response_model=UserOut)
  async def register(user_type: UserType, user_in: UserIn, db: AsyncSession = Depends(get_db)):
      existing_user = await get_user_by_username(db, user_in.username)
      if existing_user:
          raise HTTPException(status_code=status.HTTP_409_CONFLICT,
                              detail="Username already exists")
  
      if user_type == UserType.STUDENT:
          new_user = Student(first_name=user_in.first_name,
                             last_name=user_in.last_name, email=user_in.email)
          user_id = await create_student(db=db, student=new_user)
      elif user_type == UserType.TUTOR:
          new_user = Tutor(first_name=user_in.first_name,
                           last_name=user_in.last_name, email=user_in.email)
          user_id = await create_tutor(db=db, tutor=new_user)
  
      await create_user(db=db, user_in=user_in, user_type=user_type.value, user_id=user_id)
  
      user_out = UserOut(user_id=user_id,
                         user_type=user_type)
  
      return user_out

Contents of tests/testsuite/conftest.py:
  import asyncio
  
  import random
  import string
  from fastapi.testclient import TestClient
  import pytest
  
  from server.main import app
  
  from server.schemas import UserIn
  from server.models import Student
  from server.crud import create_student, create_user
  from server.utils import UserType
  from server.database import async_engine, async_database, get_db
  from server.database import Base, session_factory
  
  
  @pytest.fixture(scope="module")
  def event_loop():
      loop = asyncio.new_event_loop()
      yield loop
      loop.close()
  
  
  @pytest.fixture(scope="module")
  def client():
      client = TestClient(app)
      return client
  
  
  # @pytest.fixture(scope="module")
  # async def db():
  #     async with async_database:
  #         # Create the database tables
  #         Base.metadata.create_all(bind=async_engine)
  #         yield async_database
  #         # Drop the database tables after the tests have finished running
  #         Base.metadata.drop_all(bind=async_engine)
  
  
  # @pytest.fixture(scope="function")
  # async def session(db):
  #     async with session_factory() as session:
  #         yield session
  
  
  def generate_random_string(length=6):
      return ''.join(random.choices(string.ascii_letters
                                    + string.digits, k=length))
  
  
  @pytest.fixture(scope="function")
  def test_user():
      unique_id = f"{generate_random_string()}"
      test_user = UserIn(username=f"teststudent_{unique_id}",
                         password="testpassword",
                         first_name="Test",
                         last_name="Student",
                         email=f"test_{unique_id}@example.com")
      return test_user
  
  
  @pytest.fixture(scope="function")
  async def test_student(test_user):
      new_student = Student(first_name=test_user.first_name,
                            last_name=test_user.last_name, email=test_user.email)
  
      db = get_db()
      student_id = await create_student(db=db, student=new_student)
      await create_user(db=db, user_in=test_user,
                        user_type=UserType.STUDENT.value, user_id=student_id)
      return student_id, test_user

Contents of server/database.py:
  from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
  from sqlalchemy.ext.declarative import declarative_base
  from sqlalchemy.orm import sessionmaker
  from sqlalchemy import MetaData
  
  import databases
  
  from server.config import DATABASE_URL
  
  SCHEMA = "lab_management"
  Base = declarative_base(metadata=MetaData(schema=SCHEMA))
  
  async_engine = create_async_engine(DATABASE_URL, future=True, echo=True)
  async_database = databases.Database(DATABASE_URL)
  
  session_factory = sessionmaker(
      autocommit=False, autoflush=False, bind=async_engine, class_=AsyncSession)
  
  
  async def get_db():
      async with session_factory() as session:
          yield session

