Contents of server/models/lab.py:
  
  from sqlalchemy import Column, Enum, ForeignKey, Integer, String, DateTime, select
  from sqlalchemy.orm import relationship
  from server.config import SCHEMA
  from server.generation import types
  
  
  from server.models.base import Base
  
  
  class Lab(Base):
      __tablename__ = "lab"
      __table_args__ = ({"schema": f"{SCHEMA}"},)
  
      id = Column(Integer, primary_key=True, index=True)
      lab_name = Column(String(255), nullable=False)
      tutor_id = Column(Integer, ForeignKey(
          f"{SCHEMA}.tutor.id", ondelete="NO ACTION"), nullable=False)
      date_start = Column(DateTime, nullable=True)
      deadline = Column(DateTime, nullable=True)
      description = Column(String)
  
      generator_type = Column(Enum(types.GenType), nullable=False, index=True)
  
      tutor = relationship("Tutor", back_populates="labs")
      variants = relationship("LabVariant", back_populates="lab")

Contents of server/models/student.py:
  from sqlalchemy import Column, Integer, String, select
  from sqlalchemy.ext.asyncio import AsyncSession
  from sqlalchemy.orm import relationship
  from server.config import SCHEMA
  
  
  from server.models.base import Base
  
  
  class Student(Base):
      __tablename__ = "student"
      __table_args__ = ({"schema": f"{SCHEMA}"},)
  
      id = Column(Integer, primary_key=True, index=True)
      first_name = Column(String(255), nullable=False)
      last_name = Column(String(255), nullable=False)
      email = Column(String(255), nullable=False, unique=True)
  
      solutions = relationship("LabSolution", back_populates="student")
      results = relationship("LabResult", back_populates="student")

Contents of server/models/lab_variant.py:
  from sqlalchemy import Column, ForeignKey, Integer, LargeBinary, String, select
  # from sqlalchemy.ext.asyncio import AsyncSession
  from sqlalchemy.orm import relationship
  from server.config import SCHEMA
  
  from server.models.base import Base
  
  
  class LabVariant(Base):
      __tablename__ = "lab_var"
      __table_args__ = ({"schema": f"{SCHEMA}"},)
  
      id = Column(Integer, primary_key=True, index=True)
      lab_id = Column(Integer,
                      ForeignKey(f"{SCHEMA}.lab.id", ondelete="CASCADE"),
                      nullable=False)
      variant_number = Column(Integer, nullable=False)
      variant_filename = Column(String)
      file_data = Column(LargeBinary)
  
      lab = relationship("Lab", back_populates="variants")
      solutions = relationship("LabSolution", back_populates="variant")

